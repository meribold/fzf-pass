#!/usr/bin/env bash

# fzf-pass
# (c) 2015 Rasmus Steinke <rasi@xssn.at>

# --bind
# --expect
# consider the preview and toggle-preview actions
_fzfmenu () {
   fzfmenu --expect=alt-2,alt-3
}

# We expect to find these fields in pass(1)'s output
USERNAME_field=user
AUTOTYPE_field=autotype
OTPmethod_field=otp_method

default_autotype='user :tab pass'
delay=2
wait=0.05
xdotool_delay=12
default_user=meribold

listgpg () {
   readarray -d '' pw_list < <(find -L . -name '*.gpg' -print0)
   pw_list=("${pw_list[@]#./}")
   printf '%s\n' "${pw_list[@]}" | sort -n
}

# get all password files and output as newline-delimited text
list_passwords() {
   cd ~/.password-store || exit
   readarray -t pw_list < <(listgpg)
   printf '%s\n' "${pw_list[@]%.gpg}" | sort -n
}

autopass () {
   for word in ${stuff["$AUTOTYPE_field"]}; do
      case "$word" in
         ':tab') xdotool key Tab;;
         ':space') xdotool key space;;
         ':delay') sleep "$delay";;
         ':enter') xdotool key Return;;
         ':otp') printf '%s' "$(generateOTP)" | xdotool type --delay $xdotool_delay --clearmodifiers --file -;;
         'pass') printf '%s' "$password" | xdotool type --delay $xdotool_delay --clearmodifiers --file -;;
         'path') printf '%s' "$selected_password" | rev | cut -d'/' -f1 | rev | xdotool type --clearmodifiers --file -;;
         *) printf '%s' "${stuff[${word}]}" | xdotool type --delay $xdotool_delay --clearmodifiers --file -;;
      esac
   done
}

typeUser () {
   printf '%s' "${stuff[${USERNAME_field}]}" | xdotool type --delay $xdotool_delay --clearmodifiers --file -
}

typePass () {
   printf '%s' "$password" | xdotool type --delay $xdotool_delay --clearmodifiers --file -
}

generateOTP () {
   # First, we check if there is a non-conventional OTP command in the pass file
   if pass "$selected_password" | grep -q "$OTPmethod_field: "; then
      # We execute the commands after otp_method: AS-IS
      bash -c "$(pass "$selected_password" | grep "$OTPmethod_field: " | cut -d' ' -f2-)"
   else
      # If there is no method defined, fallback to pass-otp
      pass otp "$selected_password"
   fi
}

# args=(-dmenu -kb-custom-2 "$type_user" -kb-custom-3 "$type_pass" -p '>')
# args=()
# selected_password=$(list_passwords 2>/dev/null | _fzfmenu "${args[@]}") || exit $?
# notify-send "$selected_password"

readarray -t fzf_output < <(list_passwords 2>/dev/null | _fzfmenu) || exit $?

key=${fzf_output[0]}
selected_password=${fzf_output[1]}

# notify-send "foo $key $selected_password"

[[ $selected_password ]] || exit $?

readarray -t password_temp < <(pass show "$selected_password")
password=${password_temp[0]}

fields=$(printf '%s\n' "${password_temp[@]:1}" | awk '$1 ~ /:$/ || /otpauth:\/\// {$1=$1;print}')
declare -A stuff
stuff[pass]=$password

if [[ -n $fields ]]; then
   while read -r line; do
      unset _id _val
      case "$line" in
         'otpauth://'*|"$OTPmethod_field"*)
            _id=OTP
            _val=
            ;;
         *)
            _id=${line%%: *}
            _val=${line#* }
            ;;
      esac

      if [[ -n $_id ]]; then
         stuff[${_id}]=$_val
      fi
   done < <(printf '%s\n' "$fields")

   if [[ ${stuff[autotype]+autotype} ]]; then
      :
   else
      stuff[autotype]="$USERNAME_field :tab pass"
   fi
fi

if [[ -z ${stuff["${AUTOTYPE_field}"]} ]]; then
   if [[ -n $default_autotype ]]; then
      stuff[${AUTOTYPE_field}]=$default_autotype
   fi
fi
if [[ -z ${stuff["${USERNAME_field}"]} ]]; then
   if [[ -n $default_user ]]; then
      if [[ $default_user == :filename ]]; then
         stuff[$USERNAME_field]=$(basename "$selected_password")
      else
         stuff[$USERNAME_field]=$default_user
      fi
   fi
fi

x_repeat_enabled=$(xset q | awk '/auto repeat:/ {print $3}')

cleanup() {
   xset r "$x_repeat_enabled"
}
trap cleanup EXIT

xset r off

case $key in
   alt-2) sleep $wait; typeUser;;
   alt-3) sleep $wait; typePass;;
   *) sleep $wait; autopass;;
esac
